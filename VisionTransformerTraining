{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w8TGSJO1Gf9Q"
      },
      "source": [
        "# Data Mounting"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gWhN-g2F2AFY",
        "outputId": "857cd9c1-68a8-4193-d7b7-2bb8e15ff0ed"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "‚úÖ Found 8400 images total across categories:\n",
            "- health: 3800 images\n",
            "- sick no tb: 3800 images\n",
            "- tb: 800 images\n",
            "\n",
            "üñºÔ∏è Loaded sample image from 'health': h0001.png (PNG, (512, 512))\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "\n",
        "# --- 1. Define local base path ---\n",
        "base_path = r\"C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\"\n",
        "image_folder_path = os.path.join(base_path, \"images\")\n",
        "\n",
        "# --- 2. Scan image folders ---\n",
        "image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']\n",
        "categories = [\"health\", \"sick no tb\", \"tb\"]\n",
        "\n",
        "image_data = []\n",
        "\n",
        "for category in categories:\n",
        "    category_path = os.path.join(image_folder_path, category)\n",
        "    \n",
        "    if not os.path.isdir(category_path):\n",
        "        print(f\"‚ö†Ô∏è Folder not found: {category_path}\")\n",
        "        continue\n",
        "\n",
        "    for file_name in os.listdir(category_path):\n",
        "        if os.path.splitext(file_name)[1].lower() in image_extensions:\n",
        "            full_path = os.path.join(category_path, file_name)\n",
        "            image_data.append({\n",
        "                \"filename\": file_name,\n",
        "                \"category\": category,\n",
        "                \"path\": full_path\n",
        "            })\n",
        "\n",
        "print(f\"\\n‚úÖ Found {len(image_data)} images total across categories:\")\n",
        "for c in categories:\n",
        "    count = sum(1 for d in image_data if d[\"category\"] == c)\n",
        "    print(f\"- {c}: {count} images\")\n",
        "\n",
        "# --- 3. Load and display the first image as a test ---\n",
        "if image_data:\n",
        "    try:\n",
        "        first_image_info = image_data[0]\n",
        "        img = Image.open(first_image_info[\"path\"])\n",
        "        print(f\"\\nüñºÔ∏è Loaded sample image from '{first_image_info['category']}': {first_image_info['filename']} ({img.format}, {img.size})\")\n",
        "        img.show()  # This will open the image in the default image viewer\n",
        "    except Exception as e:\n",
        "        print(f\"‚ùå Error loading image: {e}\")\n",
        "else:\n",
        "    print(\"‚ùå No valid images found.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "J9KXueIzG0Hx",
        "outputId": "465a4ac8-3abb-4967-f296-11ee0dc88b73"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Base path: C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\n",
            "Image folder path: C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\\images\n",
            "CSV path: C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\\data.csv\n",
            "\n",
            "üìÑ Loaded data.csv with 8811 rows and 8 columns.\n",
            "First 5 rows of data.csv:\n",
            "       fname  image_height  image_width source  bbox target tb_type image_type\n",
            "0  h0001.png           512          512  train  none  no_tb    none    healthy\n",
            "1  h0003.png           512          512  train  none  no_tb    none    healthy\n",
            "2  h0005.png           512          512  train  none  no_tb    none    healthy\n",
            "3  h0008.png           512          512  train  none  no_tb    none    healthy\n",
            "4  h0009.png           512          512  train  none  no_tb    none    healthy\n",
            "\n",
            "Counts per 'image_type' in data.csv:\n",
            "image_type\n",
            "healthy           3800\n",
            "sick_but_no_tb    3800\n",
            "tb                1211\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Scanning physical image folders in: C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\\images...\n",
            "- Found 3800 images in folder 'health'\n",
            "- Found 3800 images in folder 'sick no tb'\n",
            "- Found 800 images in folder 'tb'\n",
            "\n",
            "‚úÖ Found 8400 images total from physical scan.\n",
            "\n",
            "Comparison between data.csv and scanned image files:\n",
            "  Unique filenames in CSV: 8399\n",
            "  Unique filenames in scan: 8400\n",
            "  Filenames in CSV but NOT found in scan (3 specific folders): 0\n",
            "  Filenames in scan but NOT in CSV: 1\n",
            "    Examples: ['tb1199.png']\n",
            "  Common filenames (present in both CSV and scan): 8399\n",
            "  ‚ö†Ô∏è Note: 1 scanned images are not listed in the CSV's 'fname' column.\n",
            "\n",
            "Attempting to load sample based on first CSV entry: h0001.png (type: healthy)\n",
            "  Expected path: C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\\images\\health\\h0001.png\n",
            "üñºÔ∏è Loaded sample via CSV: 'health/h0001.png' (PNG, (512, 512))\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "\n",
        "# --- 1. Define Paths ---\n",
        "base_path = r\"C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\"\n",
        "image_folder_path = os.path.join(base_path, \"images\")\n",
        "csv_path = os.path.join(base_path, \"data.csv\")\n",
        "\n",
        "print(f\"Base path: {base_path}\")\n",
        "print(f\"Image folder path: {image_folder_path}\")\n",
        "print(f\"CSV path: {csv_path}\\n\")\n",
        "\n",
        "# --- 2. Load data.csv ---\n",
        "df = None # Initialize df to None\n",
        "if os.path.isfile(csv_path):\n",
        "    try:\n",
        "        df = pd.read_csv(csv_path)\n",
        "        print(f\"üìÑ Loaded data.csv with {len(df)} rows and {len(df.columns)} columns.\")\n",
        "        print(\"First 5 rows of data.csv:\")\n",
        "        print(df.head())\n",
        "        # print(\"\\nColumn info from data.csv:\")\n",
        "        # df.info() # Uncomment if you want detailed column types and non-null counts\n",
        "        \n",
        "        # Analyze 'image_type' which is used as the label in later cells\n",
        "        if 'image_type' in df.columns:\n",
        "            print(\"\\nCounts per 'image_type' in data.csv:\")\n",
        "            print(df['image_type'].value_counts())\n",
        "        else:\n",
        "            print(\"\\n‚ö†Ô∏è 'image_type' column not found in data.csv, which might be an issue for later processing.\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"‚ùå Failed to load data.csv: {e}\")\n",
        "else:\n",
        "    print(f\"‚ùå data.csv not found at: {csv_path}\")\n",
        "\n",
        "# --- 3. Scan Image Folders (for verification and to build image_data list) ---\n",
        "image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']\n",
        "# These categories correspond to the subfolder names under 'images'\n",
        "physical_scan_categories = [\"health\", \"sick no tb\", \"tb\"] \n",
        "scanned_image_data = [] # To store info about physically found images\n",
        "\n",
        "print(f\"\\nScanning physical image folders in: {image_folder_path}...\")\n",
        "for category_folder_name in physical_scan_categories:\n",
        "    category_path = os.path.join(image_folder_path, category_folder_name)\n",
        "    \n",
        "    if not os.path.isdir(category_path):\n",
        "        print(f\"‚ö†Ô∏è Physical folder for category '{category_folder_name}' not found: {category_path}\")\n",
        "        continue\n",
        "\n",
        "    count_in_category = 0\n",
        "    for file_name_in_folder in os.listdir(category_path):\n",
        "        if os.path.splitext(file_name_in_folder)[1].lower() in image_extensions:\n",
        "            full_path = os.path.join(category_path, file_name_in_folder)\n",
        "            scanned_image_data.append({\n",
        "                \"filename\": file_name_in_folder,\n",
        "                \"category_folder\": category_folder_name, \n",
        "                \"path\": full_path\n",
        "            })\n",
        "            count_in_category += 1\n",
        "    print(f\"- Found {count_in_category} images in folder '{category_folder_name}'\")\n",
        "\n",
        "total_scanned_images = len(scanned_image_data)\n",
        "print(f\"\\n‚úÖ Found {total_scanned_images} images total from physical scan.\")\n",
        "\n",
        "# --- 4. Compare CSV entries with physically scanned files (Optional but good for sanity check) ---\n",
        "if df is not None and 'fname' in df.columns:\n",
        "    csv_filenames_set = set(df['fname'].unique())\n",
        "    scanned_filenames_set = set(item['filename'] for item in scanned_image_data)\n",
        "\n",
        "    print(f\"\\nComparison between data.csv and scanned image files:\")\n",
        "    print(f\"  Unique filenames in CSV: {len(csv_filenames_set)}\")\n",
        "    print(f\"  Unique filenames in scan: {len(scanned_filenames_set)}\")\n",
        "    \n",
        "    in_csv_not_scanned = csv_filenames_set - scanned_filenames_set\n",
        "    in_scan_not_csv = scanned_filenames_set - csv_filenames_set\n",
        "    \n",
        "    print(f\"  Filenames in CSV but NOT found in scan ({len(physical_scan_categories)} specific folders): {len(in_csv_not_scanned)}\")\n",
        "    if len(in_csv_not_scanned) > 0 and len(in_csv_not_scanned) < 20 : # Print a few if the list is small\n",
        "        print(f\"    Examples: {list(in_csv_not_scanned)[:5]}\")\n",
        "    \n",
        "    print(f\"  Filenames in scan but NOT in CSV: {len(in_scan_not_csv)}\")\n",
        "    if len(in_scan_not_csv) > 0 and len(in_scan_not_csv) < 20:\n",
        "        print(f\"    Examples: {list(in_scan_not_csv)[:5]}\")\n",
        "        \n",
        "    common_files = len(csv_filenames_set.intersection(scanned_filenames_set))\n",
        "    print(f\"  Common filenames (present in both CSV and scan): {common_files}\")\n",
        "    if total_scanned_images != common_files and len(in_scan_not_csv) > 0:\n",
        "        print(f\"  ‚ö†Ô∏è Note: {len(in_scan_not_csv)} scanned images are not listed in the CSV's 'fname' column.\")\n",
        "    if len(df) != common_files and len(in_csv_not_scanned) > 0:\n",
        "         print(f\"  ‚ö†Ô∏è Note: {len(in_csv_not_scanned)} CSV entries do not have corresponding physical files in the scanned folders.\")\n",
        "         print(f\"     This could be because they belong to a 'val' set stored elsewhere, or are missing.\")\n",
        "\n",
        "\n",
        "# --- 5. Load and Display a Sample Image ---\n",
        "# Prioritize loading a sample based on the first entry in the CSV if it's available and the file exists.\n",
        "# This confirms the path construction logic used in later cells.\n",
        "\n",
        "sample_image_loaded = False\n",
        "if df is not None and not df.empty and 'fname' in df.columns and 'image_type' in df.columns:\n",
        "    first_csv_row = df.iloc[0]\n",
        "    sample_fname_from_csv = first_csv_row['fname']\n",
        "    sample_image_type_from_csv = first_csv_row['image_type']\n",
        "\n",
        "    # Determine the correct subfolder based on 'image_type' (consistent with Cell 6 logic)\n",
        "    folder_for_csv_sample = sample_image_type_from_csv\n",
        "    if sample_image_type_from_csv == \"healthy\":\n",
        "        folder_for_csv_sample = \"health\"\n",
        "    elif sample_image_type_from_csv == \"sick_but_no_tb\":\n",
        "        folder_for_csv_sample = \"sick no tb\"\n",
        "    # 'tb' already matches the folder name\n",
        "\n",
        "    prospective_path = os.path.join(image_folder_path, folder_for_csv_sample, sample_fname_from_csv)\n",
        "    \n",
        "    print(f\"\\nAttempting to load sample based on first CSV entry: {sample_fname_from_csv} (type: {sample_image_type_from_csv})\")\n",
        "    print(f\"  Expected path: {prospective_path}\")\n",
        "\n",
        "    if os.path.isfile(prospective_path):\n",
        "        try:\n",
        "            img = Image.open(prospective_path)\n",
        "            print(f\"üñºÔ∏è Loaded sample via CSV: '{folder_for_csv_sample}/{sample_fname_from_csv}' ({img.format}, {img.size})\")\n",
        "            # img.show() # Uncomment in an environment that supports image display\n",
        "            sample_image_loaded = True\n",
        "        except Exception as e:\n",
        "            print(f\"‚ùå Error loading image from CSV-derived path: {e}\")\n",
        "    else:\n",
        "        print(f\"‚ùå Sample image from CSV entry NOT FOUND at: {prospective_path}\")\n",
        "\n",
        "# Fallback: If CSV-based sample loading failed or CSV wasn't available, try the first scanned image.\n",
        "if not sample_image_loaded and scanned_image_data:\n",
        "    print(\"\\nAttempting to load first image found during physical scan (as fallback).\")\n",
        "    first_scanned_info = scanned_image_data[0]\n",
        "    try:\n",
        "        img = Image.open(first_scanned_info[\"path\"])\n",
        "        print(f\"üñºÔ∏è Loaded sample via scan: '{first_scanned_info['category_folder']}/{first_scanned_info['filename']}' ({img.format}, {img.size})\")\n",
        "        # img.show() # Uncomment in an environment that supports image display\n",
        "        sample_image_loaded = True\n",
        "    except Exception as e:\n",
        "        print(f\"‚ùå Error loading image from scan: {e}\")\n",
        "\n",
        "if not sample_image_loaded:\n",
        "    print(\"\\n‚ùå No sample image could be loaded either from CSV or physical scan.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZMxdlPBFHFxB"
      },
      "source": [
        "# Data Preparation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Preparation for YOLOv5"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Preparation for Vision Transformer\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "‚úÖ Datasets prepared:\n",
            "- Training samples: 6720\n",
            "- Validation samples: 1680\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from torchvision import transforms\n",
        "from PIL import Image\n",
        "\n",
        "# --- 1. Label Mapping ---\n",
        "label_map = {\n",
        "    \"health\": 0,\n",
        "    \"sick no tb\": 1,\n",
        "    \"tb\": 2\n",
        "}\n",
        "\n",
        "# --- 2. Define Transforms for ViT ---\n",
        "vit_transforms = transforms.Compose([\n",
        "    transforms.Resize((224, 224)),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize(mean=[0.5]*3, std=[0.5]*3)  # ViT often expects images normalized to [-1, 1]\n",
        "])\n",
        "\n",
        "# --- 3. Custom Dataset Class ---\n",
        "class TBX11KDataset(Dataset):\n",
        "    def __init__(self, image_entries, label_map, transform=None):\n",
        "        self.image_entries = image_entries\n",
        "        self.label_map = label_map\n",
        "        self.transform = transform\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.image_entries)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        entry = self.image_entries[idx]\n",
        "        image = Image.open(entry['path']).convert('RGB')  # Ensure 3 channels\n",
        "        label = self.label_map[entry['category_folder']]\n",
        "        \n",
        "        if self.transform:\n",
        "            image = self.transform(image)\n",
        "        \n",
        "        return image, label\n",
        "\n",
        "# --- 4. Create Dataset and DataLoader ---\n",
        "dataset = TBX11KDataset(scanned_image_data, label_map, transform=vit_transforms)\n",
        "\n",
        "# Optional: Shuffle and split into train/val/test\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_data, val_data = train_test_split(scanned_image_data, test_size=0.2, stratify=[d['category_folder'] for d in scanned_image_data], random_state=42)\n",
        "train_dataset = TBX11KDataset(train_data, label_map, transform=vit_transforms)\n",
        "val_dataset = TBX11KDataset(val_data, label_map, transform=vit_transforms)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, num_workers=2)\n",
        "val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False, num_workers=2)\n",
        "\n",
        "print(f\"\\n‚úÖ Datasets prepared:\")\n",
        "print(f\"- Training samples: {len(train_dataset)}\")\n",
        "print(f\"- Validation samples: {len(val_dataset)}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "True\n",
            "NVIDIA GeForce RTX 3050 Laptop GPU\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "print(torch.cuda.is_available())\n",
        "print(torch.cuda.get_device_name(0) if torch.cuda.is_available() else \"No GPU\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "‚úÖ Dataset split: 6720 training, 1680 validation samples.\n"
          ]
        }
      ],
      "source": [
        "import torchvision.transforms as transforms\n",
        "from torchvision.datasets import ImageFolder\n",
        "from torch.utils.data import DataLoader, random_split\n",
        "\n",
        "# --- Data transforms ---\n",
        "transform = transforms.Compose([\n",
        "    transforms.Resize((224, 224)),  # Required for ViT\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])  # Normalize to [-1, 1]\n",
        "])\n",
        "\n",
        "# --- Dataset path ---\n",
        "image_folder_path = r\"C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\\images\"\n",
        "full_dataset = ImageFolder(root=image_folder_path, transform=transform)\n",
        "\n",
        "# --- Dataset split ---\n",
        "train_size = int(0.8 * len(full_dataset))\n",
        "val_size = len(full_dataset) - train_size\n",
        "train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])\n",
        "\n",
        "# --- DataLoaders with optimal batch size ---\n",
        "batch_size = 16\n",
        "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=2, pin_memory=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=2, pin_memory=True)\n",
        "\n",
        "print(f\"‚úÖ Dataset split: {len(train_dataset)} training, {len(val_dataset)} validation samples.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "üß† Training on: cuda\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "c:\\Users\\muham\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\torchvision\\models\\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
            "  warnings.warn(\n",
            "c:\\Users\\muham\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\torchvision\\models\\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ViT_B_16_Weights.IMAGENET1K_V1`. You can also use `weights=ViT_B_16_Weights.DEFAULT` to get the most up-to-date weights.\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Downloading: \"https://download.pytorch.org/models/vit_b_16-c867db91.pth\" to C:\\Users\\muham/.cache\\torch\\hub\\checkpoints\\vit_b_16-c867db91.pth\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 330M/330M [01:48<00:00, 3.20MB/s] \n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[Epoch 1/10] Train Loss: 0.1834, Acc: 0.9403 | Val Loss: 0.1120, Acc: 0.9625 | Time: 380.13s\n",
            "[Epoch 2/10] Train Loss: 0.0757, Acc: 0.9760 | Val Loss: 0.0547, Acc: 0.9839 | Time: 380.31s\n",
            "[Epoch 3/10] Train Loss: 0.0666, Acc: 0.9783 | Val Loss: 0.0631, Acc: 0.9762 | Time: 380.09s\n",
            "[Epoch 4/10] Train Loss: 0.0577, Acc: 0.9813 | Val Loss: 0.0617, Acc: 0.9827 | Time: 379.89s\n",
            "[Epoch 5/10] Train Loss: 0.0433, Acc: 0.9856 | Val Loss: 0.0522, Acc: 0.9839 | Time: 379.62s\n",
            "[Epoch 6/10] Train Loss: 0.0268, Acc: 0.9920 | Val Loss: 0.0764, Acc: 0.9774 | Time: 380.04s\n",
            "[Epoch 7/10] Train Loss: 0.0433, Acc: 0.9857 | Val Loss: 0.0630, Acc: 0.9804 | Time: 379.65s\n",
            "[Epoch 8/10] Train Loss: 0.0438, Acc: 0.9860 | Val Loss: 0.0635, Acc: 0.9804 | Time: 380.05s\n",
            "[Epoch 9/10] Train Loss: 0.0295, Acc: 0.9902 | Val Loss: 0.0470, Acc: 0.9845 | Time: 380.03s\n",
            "[Epoch 10/10] Train Loss: 0.0357, Acc: 0.9882 | Val Loss: 0.0597, Acc: 0.9786 | Time: 380.09s\n",
            "‚úÖ Model weights saved to: C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\\vit_model.pth\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1400x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import torch\n",
        "from torch import nn, optim\n",
        "from torch.utils.data import DataLoader\n",
        "from torchvision import models\n",
        "import time\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- 1. Use CUDA if available ---\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(f\"üß† Training on: {device}\")\n",
        "\n",
        "# Optional: enable cuDNN auto-tuner for faster GPU training\n",
        "torch.backends.cudnn.benchmark = True\n",
        "\n",
        "# --- 2. Hyperparameters ---\n",
        "batch_size = 16\n",
        "epochs = 10\n",
        "learning_rate = 1e-4\n",
        "\n",
        "# --- 3. Dataloaders (Assume train_dataset and val_dataset are already defined) ---\n",
        "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4, pin_memory=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=4, pin_memory=True)\n",
        "\n",
        "# --- 4. Load pretrained Vision Transformer ---\n",
        "model = models.vit_b_16(pretrained=True)\n",
        "num_classes = 3  # 'health', 'sick no tb', 'tb'\n",
        "model.heads.head = nn.Linear(model.heads.head.in_features, num_classes)\n",
        "model = model.to(device)\n",
        "\n",
        "# --- 5. Loss and optimizer ---\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
        "\n",
        "# --- 6. Training loop ---\n",
        "def train_model(model, train_loader, val_loader, criterion, optimizer, device, epochs=10):\n",
        "    train_loss_history = []\n",
        "    train_acc_history = []\n",
        "    val_loss_history = []\n",
        "    val_acc_history = []\n",
        "\n",
        "    for epoch in range(epochs):\n",
        "        start_time = time.time()\n",
        "        model.train()\n",
        "        running_loss = 0.0\n",
        "        running_corrects = 0\n",
        "\n",
        "        for inputs, labels in train_loader:\n",
        "            inputs = inputs.to(device)\n",
        "            labels = labels.to(device)\n",
        "\n",
        "            optimizer.zero_grad()\n",
        "            outputs = model(inputs)\n",
        "            loss = criterion(outputs, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            _, preds = torch.max(outputs, 1)\n",
        "            running_loss += loss.item() * inputs.size(0)\n",
        "            running_corrects += torch.sum(preds == labels.data)\n",
        "\n",
        "        epoch_loss = running_loss / len(train_loader.dataset)\n",
        "        epoch_acc = running_corrects.double() / len(train_loader.dataset)\n",
        "\n",
        "        train_loss_history.append(epoch_loss)\n",
        "        train_acc_history.append(epoch_acc.item())\n",
        "\n",
        "        # --- Validation ---\n",
        "        model.eval()\n",
        "        val_loss = 0.0\n",
        "        val_corrects = 0\n",
        "\n",
        "        with torch.no_grad():\n",
        "            for inputs, labels in val_loader:\n",
        "                inputs = inputs.to(device)\n",
        "                labels = labels.to(device)\n",
        "                outputs = model(inputs)\n",
        "                loss = criterion(outputs, labels)\n",
        "\n",
        "                _, preds = torch.max(outputs, 1)\n",
        "                val_loss += loss.item() * inputs.size(0)\n",
        "                val_corrects += torch.sum(preds == labels.data)\n",
        "\n",
        "        val_epoch_loss = val_loss / len(val_loader.dataset)\n",
        "        val_epoch_acc = val_corrects.double() / len(val_loader.dataset)\n",
        "\n",
        "        val_loss_history.append(val_epoch_loss)\n",
        "        val_acc_history.append(val_epoch_acc.item())\n",
        "\n",
        "        # --- Logging ---\n",
        "        print(f\"[Epoch {epoch+1}/{epochs}] \"\n",
        "              f\"Train Loss: {epoch_loss:.4f}, Acc: {epoch_acc:.4f} | \"\n",
        "              f\"Val Loss: {val_epoch_loss:.4f}, Acc: {val_epoch_acc:.4f} | \"\n",
        "              f\"Time: {time.time() - start_time:.2f}s\")\n",
        "\n",
        "    return train_loss_history, train_acc_history, val_loss_history, val_acc_history\n",
        "\n",
        "# --- 7. Start Training ---\n",
        "train_losses, train_accs, val_losses, val_accs = train_model(\n",
        "    model, train_loader, val_loader, criterion, optimizer, device, epochs=epochs\n",
        ")\n",
        "\n",
        "# --- 9. Save model weights to specified path ---\n",
        "save_path = r\"C:\\Users\\muham\\Downloads\\archive (1)\\tbx11k-simplified\\vit_model.pth\"\n",
        "torch.save(model.state_dict(), save_path)\n",
        "print(f\"‚úÖ Model weights saved to: {save_path}\")\n",
        "\n",
        "\n",
        "# --- 8. Plot Loss and Accuracy ---\n",
        "plt.figure(figsize=(14, 6))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(train_losses, label=\"Train Loss\")\n",
        "plt.plot(val_losses, label=\"Val Loss\")\n",
        "plt.title(\"Loss over Epochs\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(train_accs, label=\"Train Acc\")\n",
        "plt.plot(val_accs, label=\"Val Acc\")\n",
        "plt.title(\"Accuracy over Epochs\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
